(startRule (module (moduleBody (moduleBodyElement (moduleBlock (block (blockStmt (openStmt Open (valueStmt (literal "TESTFILE")) For Input As (valueStmt (literal #1)))) (blockStmt (closeStmt Close (valueStmt (literal #1)))) (blockStmt (openStmt Open (valueStmt (literal "TESTFILE")) For Binary Access Write As (valueStmt (literal #1)))) (blockStmt (closeStmt Close (valueStmt (literal #1))))))) (moduleBodyElement (typeStmt Type (ambiguousIdentifier Record) (typeStmt_Element (ambiguousIdentifier ID) (asTypeClause As (type (baseType Integer)))) (typeStmt_Element (ambiguousIdentifier (ambiguousKeyword Name)) (asTypeClause As (type (baseType String)) (fieldLength * 20))) End Type)) (moduleBodyElement (moduleBlock (block (blockStmt (variableStmt Dim (variableListStmt (variableSubStmt (ambiguousIdentifier MyRecord) (asTypeClause As (type (complexType (ambiguousIdentifier Record)))))))) (blockStmt (openStmt Open (valueStmt (literal "TESTFILE")) For Random As (valueStmt (literal #1)) Len = (valueStmt (implicitCallStmt_InStmt (iCS_S_ProcedureOrArrayCall (ambiguousIdentifier (ambiguousKeyword Len)) ( (argsCall (argCall (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier MyRecord)))))))))))) (blockStmt (closeStmt Close (valueStmt (literal #1)))) (blockStmt (openStmt Open (valueStmt (literal "TESTFILE")) For Output Shared As (valueStmt (literal #1)))) (blockStmt (closeStmt Close (valueStmt (literal #1)))) (blockStmt (openStmt Open (valueStmt (literal "TESTFILE")) For Binary Access Read Lock Read As (valueStmt (literal #1))))))))) <EOF>)