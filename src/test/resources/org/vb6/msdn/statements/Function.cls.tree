(startRule (module (moduleBody (moduleBodyElement (functionStmt Function (ambiguousIdentifier CalculateSquareRoot) (argList ( (arg (ambiguousIdentifier NumberArg) (asTypeClause As (type (baseType Double)))))) (asTypeClause As (type (baseType Double))) (block (blockStmt (ifThenElseStmt (ifBlockStmt If (ifConditionStmt (valueStmt (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier NumberArg)))) < (valueStmt (literal 0)))) Then (block (blockStmt (exitStmt Exit Function)))) (ifElseBlockStmt Else (block (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier CalculateSquareRoot))) = (valueStmt (implicitCallStmt_InStmt (iCS_S_ProcedureOrArrayCall (ambiguousIdentifier Sqr) ( (argsCall (argCall (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier NumberArg)))))))))))))) End If))) End Function)) (moduleBodyElement (functionStmt Function (ambiguousIdentifier CalcSum) (argList ( (arg ByVal (ambiguousIdentifier FirstArg) (asTypeClause As (type (baseType Integer)))) , (arg ParamArray (ambiguousIdentifier OtherArgs) ()))) (block (blockStmt (variableStmt Dim (variableListStmt (variableSubStmt (ambiguousIdentifier ReturnValue))))) (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier ReturnValue))) = (valueStmt (implicitCallStmt_InStmt (iCS_S_ProcedureOrArrayCall (ambiguousIdentifier CalcSum) ( (argsCall (argCall (valueStmt (literal 4))) , (argCall (valueStmt (literal 3))) , (argCall (valueStmt (literal 2))) , (argCall (valueStmt (literal 1))))))))))) End Function)))) <EOF>)