(startRule (module (moduleBody (moduleBodyElement (moduleBlock (block (blockStmt (variableStmt Dim (variableListStmt (variableSubStmt (ambiguousIdentifier Var1)) , (variableSubStmt (ambiguousIdentifier Var2))))) (blockStmt (letStmt Let (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1))) = (valueStmt (literal "test")))) (blockStmt (letStmt Let (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var2))) = (valueStmt (literal 2)))) (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1))) = (valueStmt (literal "hello world")))) (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1))) = (valueStmt (literal "hello world")))) (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1))) = (valueStmt (literal "hello world")))) (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var1))) = (valueStmt (literal "hello world"))))))) (moduleBodyElement (functionStmt Function (ambiguousIdentifier SomeFunction) (argList ()) \t (block (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var2))) = (valueStmt (literal 4)))) \t (blockStmt (letStmt Let (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier Var2))) = (valueStmt (literal 6))))) End Function)))) <EOF>)