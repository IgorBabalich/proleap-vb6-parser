(startRule (module (moduleBody (moduleBodyElement (moduleBlock (block (blockStmt (variableStmt Dim (variableListStmt (variableSubStmt (ambiguousIdentifier CurrentI) (asTypeClause As (type (baseType Integer))))))) (blockStmt (variableStmt Dim (variableListStmt (variableSubStmt (ambiguousIdentifier CurrentObj) (asTypeClause As (type (complexType (ambiguousIdentifier Object))))))))))) (moduleBodyElement (propertySetStmt Property Set (ambiguousIdentifier CurrentI) (argList ( (arg (ambiguousIdentifier I) (asTypeClause As (type (baseType Integer)))))) \t (block (blockStmt (letStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier CurrentI))) = (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier I))))))) End Property)) (moduleBodyElement (propertySetStmt Property Set (ambiguousIdentifier CurrentObject) (argList ( (arg (ambiguousIdentifier J) (asTypeClause AS (type (complexType (ambiguousIdentifier Object))))))) \t (block (blockStmt (setStmt Set (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier CurrentObj))) = (valueStmt (implicitCallStmt_InStmt (iCS_S_VariableOrProcedureCall (ambiguousIdentifier J))))))) End Property)))) <EOF>)